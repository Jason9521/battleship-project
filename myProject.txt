diff --git a/dist/main.js b/dist/main.js
index 460ffdb..57260b0 100644
--- a/dist/main.js
+++ b/dist/main.js
@@ -498,6 +498,7 @@ function clearDOMMenu() {
 __webpack_require__.r(__webpack_exports__);
 /* harmony export */ __webpack_require__.d(__webpack_exports__, {
 /* harmony export */   Gameboard: () => (/* binding */ Gameboard),
+/* harmony export */   Player: () => (/* binding */ Player),
 /* harmony export */   Ship: () => (/* binding */ Ship)
 /* harmony export */ });
 /* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ "./src/interface.js");
@@ -523,18 +524,29 @@ const Ship = (shipName, shipLength) => {
         placeShip() {
             this.isPlaced = true
         },
-
-        isShipPlaced() {
-            return this.isPlaced
-        },
     }
 };
 
 const Gameboard = (coordinates, nodeList) => {
     return {
-        isXAxis: true,
 
-        isYAxis: false,
+        carrierPlaced : false,
+        battleshipPlaced : false,
+        cruiserPlaced : false,
+        submarinePlaced : false,
+        destroyerPlaced : false,
+
+        areShipsPlaced() {
+            if (this.carrierPlaced == false) {
+                this.deployCarrier()
+            } else if (this.battleshipPlaced == false) {
+                this.deployBattleship()
+            } else if (this.cruiserPlaced == false) {
+                this.deployCruiser()
+            } else if (this.submarinePlaced) {
+                this.deploySubmarine
+            } else {this.deployDestroyer()}
+        },
 
         isValidBox(box1, box2) {
             return box1 === box2 ? true : false 
@@ -542,11 +554,11 @@ const Gameboard = (coordinates, nodeList) => {
 
         deployCarrier() {
 
-            if (this.isXAxis) {
+            if (_interface__WEBPACK_IMPORTED_MODULE_0__.isXAxis) {
 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
-
+                    
                     box.addEventListener('mouseover', () => {
                         box.style.backgroundColor = 'green'
                         nodeList[boxSelect + 10].style.backgroundColor = 'green'
@@ -562,8 +574,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 30].style.backgroundColor = 'white'
                         nodeList[boxSelect + 40].style.backgroundColor = 'white'
                     })
-
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -594,20 +607,20 @@ const Gameboard = (coordinates, nodeList) => {
                             nodeList[boxSelect + 4].style.backgroundColor = 'white'
                         })
 
-                        box.addEventListener('click', () => {
-                            try {
-                                console.log('Works')
-                            } catch(err) {
-                                console.log(err)
-                            }
-                        })
+                        // box.addEventListener('click', () => {
+                        //     try {
+                        //         console.log('Works')
+                        //     } catch(err) {
+                        //         console.log(err)
+                        //     }
+                        // })
                     })
                 }    
             },
             
         deployBattleship() {
 
-            if (this.isXAxis) {
+            if (_interface__WEBPACK_IMPORTED_MODULE_0__.isXAxis) {
 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
@@ -625,7 +638,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 20].style.backgroundColor = 'white'
                         nodeList[boxSelect + 30].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -657,7 +672,7 @@ const Gameboard = (coordinates, nodeList) => {
         
         deployCruiser() {
 
-            if (this.isXAxis) {
+            if (_interface__WEBPACK_IMPORTED_MODULE_0__.isXAxis) {
                 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
@@ -673,7 +688,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 10].style.backgroundColor = 'white'
                         nodeList[boxSelect + 20].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -696,11 +713,12 @@ const Gameboard = (coordinates, nodeList) => {
                             nodeList[boxSelect + 2].style.backgroundColor = 'white'
                         })
                     })
-        }},
+                }
+            },
             
         deploySubmarine() {
 
-            if(this.isXAxis) {
+            if(_interface__WEBPACK_IMPORTED_MODULE_0__.isXAxis) {
 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
@@ -716,7 +734,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 10].style.backgroundColor = 'white'
                         nodeList[boxSelect + 20].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -744,7 +764,7 @@ const Gameboard = (coordinates, nodeList) => {
             
         deployDestroyer() {
                 
-            if (this.isXAxis) {
+            if (_interface__WEBPACK_IMPORTED_MODULE_0__.isXAxis) {
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
 
@@ -757,7 +777,9 @@ const Gameboard = (coordinates, nodeList) => {
                         box.style.backgroundColor = 'white'
                         nodeList[boxSelect + 10].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -775,11 +797,21 @@ const Gameboard = (coordinates, nodeList) => {
                             box.style.backgroundColor = 'white'
                             nodeList[boxSelect + 1].style.backgroundColor = 'white'
                         })
-                    })}   
+                    })
+                }   
             },
         }
     }
 
+    const Player = () => {
+
+        return {
+
+            
+
+        }
+    }
+
 
 
 
@@ -798,6 +830,7 @@ const Gameboard = (coordinates, nodeList) => {
 __webpack_require__.r(__webpack_exports__);
 /* harmony export */ __webpack_require__.d(__webpack_exports__, {
 /* harmony export */   computerCoordinates: () => (/* binding */ computerCoordinates),
+/* harmony export */   isXAxis: () => (/* binding */ isXAxis),
 /* harmony export */   loadGameBoard: () => (/* binding */ loadGameBoard),
 /* harmony export */   loadMain: () => (/* binding */ loadMain),
 /* harmony export */   playerCoordinates: () => (/* binding */ playerCoordinates)
@@ -815,7 +848,10 @@ const playerCoordinates = ['PA1', 'PA2', 'PA3', 'PA4', 'PA5', 'PA6', 'PA7', 'PA8
 
 const computerCoordinates = ['CA1', 'CA2', 'CA3', 'CA4', 'CA5', 'CA6', 'CA7', 'CA8', 'CA9', 'CA10', 'CB1', 'CB2', 'CB3', 'CB4', 'CB5', 'CB6',  'CB7', 'CB8', 'CB9', 'CB10', 'CC1', 'CC2', 'CC3', 'CC4', 'CC5', 'CC6',  'CC7', 'CC8', 'CC9', 'CC10', 'CD1', 'CD2', 'CD3', 'CD4', 'CD5', 'CD6',  'CD7', 'CD8', 'CD9', 'CD10', 'CE1', 'CE2', 'CE3', 'CE4', 'CE5', 'CE6',  'CE7', 'CE8', 'CE9', 'CE10', 'CF1', 'CF2', 'CF3', 'CF4', 'CF5', 'CF6',  'CF7', 'CF8', 'CF9', 'CF10', 'CG1', 'CG2', 'CG3', 'CG4', 'CG5', 'CG6',  'CG7', 'CG8', 'CG9', 'CG10', 'CH1', 'CH2', 'CH3', 'CH4', 'CH5', 'CH6',  'CH7', 'CH8', 'CH9', 'CH10', 'CI1', 'CI2', 'CI3', 'CI4', 'CI5', 'CI6',  'CI7', 'CI8', 'CI9', 'CI10', 'CJ1', 'CJ2', 'CJ3', 'CJ4', 'CJ5', 'CJ6',  'CJ7', 'CJ8', 'CJ9', 'CJ10',]
 
+let playerGameboard
+
 let nameValue = ''
+let isXAxis = true
 
 // Main Menu
 
@@ -924,8 +960,9 @@ function loadMain() {
         const playerBoardNodes = document.getElementById('playerBoard').childNodes
         const comBoardNodes = document.getElementById('computerBoard').childNodes
 
-        let playerGameboard = (0,_factories__WEBPACK_IMPORTED_MODULE_1__.Gameboard)(playerCoordinates, playerBoardNodes)
-        playerGameboard.deployCarrier()
+        playerGameboard = (0,_factories__WEBPACK_IMPORTED_MODULE_1__.Gameboard)(playerCoordinates, playerBoardNodes)
+        playerGameboard.areShipsPlaced()
+        // deployFleet()
     })
 }
 
@@ -938,10 +975,24 @@ function loadGameBoard() {
     document.body.appendChild(gameMessages)
 
     const axisToggle = document.createElement('button');
-    axisToggle.textContent = 'Axis Toggle'
+    axisToggle.textContent = 'Toggle Y-Axis'
     axisToggle.classList.add('axis-toggle', 'gb-fade-in')
+    axisToggle.setAttribute('id', 'axisToggle')
     document.body.appendChild(axisToggle)
 
+    axisToggle.addEventListener('click', () => {
+        if (isXAxis) {
+            isXAxis = false
+            axisToggle.textContent = 'Toggle X-Axis'
+            playerGameboard.areShipsPlaced()
+
+        } else {
+            isXAxis = true
+            axisToggle.textContent = 'Toggle Y-Axis'
+            playerGameboard.areShipsPlaced()
+        }
+    })
+
 
     const gameboardContainer = document.createElement('div');
     gameboardContainer.classList.add('gameboard-container', 'gb-fade-in')
@@ -998,6 +1049,11 @@ function loadGameBoard() {
     }
 }
 
+function deployFleet() {
+    
+}
+
+
 
 // const playerBattleship = Ship('Battleship', 4);
 // const playerCruiser = Ship('Cruiser', 3);
@@ -1113,4 +1169,4 @@ __webpack_require__.r(__webpack_exports__);
 
 /******/ })()
 ;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/src/factories.js b/src/factories.js
index 2dc0e2e..258795c 100644
--- a/src/factories.js
+++ b/src/factories.js
@@ -1,6 +1,6 @@
 'use strict'
 
-import { playerCoordinates, computerCoordinates } from "./interface";
+import { playerCoordinates, computerCoordinates, isXAxis } from "./interface";
 
 const Ship = (shipName, shipLength) => {
     return {
@@ -20,18 +20,29 @@ const Ship = (shipName, shipLength) => {
         placeShip() {
             this.isPlaced = true
         },
-
-        isShipPlaced() {
-            return this.isPlaced
-        },
     }
 };
 
 const Gameboard = (coordinates, nodeList) => {
     return {
-        isXAxis: true,
 
-        isYAxis: false,
+        carrierPlaced : false,
+        battleshipPlaced : false,
+        cruiserPlaced : false,
+        submarinePlaced : false,
+        destroyerPlaced : false,
+
+        areShipsPlaced() {
+            if (this.carrierPlaced == false) {
+                this.deployCarrier()
+            } else if (this.battleshipPlaced == false) {
+                this.deployBattleship()
+            } else if (this.cruiserPlaced == false) {
+                this.deployCruiser()
+            } else if (this.submarinePlaced) {
+                this.deploySubmarine
+            } else {this.deployDestroyer()}
+        },
 
         isValidBox(box1, box2) {
             return box1 === box2 ? true : false 
@@ -39,11 +50,11 @@ const Gameboard = (coordinates, nodeList) => {
 
         deployCarrier() {
 
-            if (this.isXAxis) {
+            if (isXAxis) {
 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
-
+                    
                     box.addEventListener('mouseover', () => {
                         box.style.backgroundColor = 'green'
                         nodeList[boxSelect + 10].style.backgroundColor = 'green'
@@ -59,8 +70,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 30].style.backgroundColor = 'white'
                         nodeList[boxSelect + 40].style.backgroundColor = 'white'
                     })
-
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -91,20 +103,20 @@ const Gameboard = (coordinates, nodeList) => {
                             nodeList[boxSelect + 4].style.backgroundColor = 'white'
                         })
 
-                        box.addEventListener('click', () => {
-                            try {
-                                console.log('Works')
-                            } catch(err) {
-                                console.log(err)
-                            }
-                        })
+                        // box.addEventListener('click', () => {
+                        //     try {
+                        //         console.log('Works')
+                        //     } catch(err) {
+                        //         console.log(err)
+                        //     }
+                        // })
                     })
                 }    
             },
             
         deployBattleship() {
 
-            if (this.isXAxis) {
+            if (isXAxis) {
 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
@@ -122,7 +134,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 20].style.backgroundColor = 'white'
                         nodeList[boxSelect + 30].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -154,7 +168,7 @@ const Gameboard = (coordinates, nodeList) => {
         
         deployCruiser() {
 
-            if (this.isXAxis) {
+            if (isXAxis) {
                 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
@@ -170,7 +184,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 10].style.backgroundColor = 'white'
                         nodeList[boxSelect + 20].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -193,11 +209,12 @@ const Gameboard = (coordinates, nodeList) => {
                             nodeList[boxSelect + 2].style.backgroundColor = 'white'
                         })
                     })
-        }},
+                }
+            },
             
         deploySubmarine() {
 
-            if(this.isXAxis) {
+            if(isXAxis) {
 
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
@@ -213,7 +230,9 @@ const Gameboard = (coordinates, nodeList) => {
                         nodeList[boxSelect + 10].style.backgroundColor = 'white'
                         nodeList[boxSelect + 20].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+            
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -241,7 +260,7 @@ const Gameboard = (coordinates, nodeList) => {
             
         deployDestroyer() {
                 
-            if (this.isXAxis) {
+            if (isXAxis) {
                 nodeList.forEach(box => {
                     let boxSelect = coordinates.indexOf(box.id)
 
@@ -254,7 +273,9 @@ const Gameboard = (coordinates, nodeList) => {
                         box.style.backgroundColor = 'white'
                         nodeList[boxSelect + 10].style.backgroundColor = 'white'
                     })
-                })} else {
+                })
+
+            } else {
 
                     nodeList.forEach(box => {
                         let boxSelect = coordinates.indexOf(box.id)
@@ -272,13 +293,23 @@ const Gameboard = (coordinates, nodeList) => {
                             box.style.backgroundColor = 'white'
                             nodeList[boxSelect + 1].style.backgroundColor = 'white'
                         })
-                    })}   
+                    })
+                }   
             },
         }
     }
 
+    const Player = () => {
+
+        return {
+
+            
+
+        }
+    }
+
 
 
 
 
-export {Ship, Gameboard}
+export {Ship, Gameboard, Player}
diff --git a/src/interface.js b/src/interface.js
index 40ae712..38270fe 100644
--- a/src/interface.js
+++ b/src/interface.js
@@ -1,7 +1,7 @@
 'use strict'
 
 import { clearDOMMenu } from "./clearDOM";
-import { Ship, Gameboard } from "./factories";
+import { Ship, Gameboard, Player } from "./factories";
 
 // Global Variables
 
@@ -9,7 +9,10 @@ const playerCoordinates = ['PA1', 'PA2', 'PA3', 'PA4', 'PA5', 'PA6', 'PA7', 'PA8
 
 const computerCoordinates = ['CA1', 'CA2', 'CA3', 'CA4', 'CA5', 'CA6', 'CA7', 'CA8', 'CA9', 'CA10', 'CB1', 'CB2', 'CB3', 'CB4', 'CB5', 'CB6',  'CB7', 'CB8', 'CB9', 'CB10', 'CC1', 'CC2', 'CC3', 'CC4', 'CC5', 'CC6',  'CC7', 'CC8', 'CC9', 'CC10', 'CD1', 'CD2', 'CD3', 'CD4', 'CD5', 'CD6',  'CD7', 'CD8', 'CD9', 'CD10', 'CE1', 'CE2', 'CE3', 'CE4', 'CE5', 'CE6',  'CE7', 'CE8', 'CE9', 'CE10', 'CF1', 'CF2', 'CF3', 'CF4', 'CF5', 'CF6',  'CF7', 'CF8', 'CF9', 'CF10', 'CG1', 'CG2', 'CG3', 'CG4', 'CG5', 'CG6',  'CG7', 'CG8', 'CG9', 'CG10', 'CH1', 'CH2', 'CH3', 'CH4', 'CH5', 'CH6',  'CH7', 'CH8', 'CH9', 'CH10', 'CI1', 'CI2', 'CI3', 'CI4', 'CI5', 'CI6',  'CI7', 'CI8', 'CI9', 'CI10', 'CJ1', 'CJ2', 'CJ3', 'CJ4', 'CJ5', 'CJ6',  'CJ7', 'CJ8', 'CJ9', 'CJ10',]
 
+let playerGameboard
+
 let nameValue = ''
+let isXAxis = true
 
 // Main Menu
 
@@ -118,8 +121,9 @@ function loadMain() {
         const playerBoardNodes = document.getElementById('playerBoard').childNodes
         const comBoardNodes = document.getElementById('computerBoard').childNodes
 
-        let playerGameboard = Gameboard(playerCoordinates, playerBoardNodes)
-        playerGameboard.deployCarrier()
+        playerGameboard = Gameboard(playerCoordinates, playerBoardNodes)
+        playerGameboard.areShipsPlaced()
+        // deployFleet()
     })
 }
 
@@ -132,10 +136,24 @@ function loadGameBoard() {
     document.body.appendChild(gameMessages)
 
     const axisToggle = document.createElement('button');
-    axisToggle.textContent = 'Axis Toggle'
+    axisToggle.textContent = 'Toggle Y-Axis'
     axisToggle.classList.add('axis-toggle', 'gb-fade-in')
+    axisToggle.setAttribute('id', 'axisToggle')
     document.body.appendChild(axisToggle)
 
+    axisToggle.addEventListener('click', () => {
+        if (isXAxis) {
+            isXAxis = false
+            axisToggle.textContent = 'Toggle X-Axis'
+            playerGameboard.areShipsPlaced()
+
+        } else {
+            isXAxis = true
+            axisToggle.textContent = 'Toggle Y-Axis'
+            playerGameboard.areShipsPlaced()
+        }
+    })
+
 
     const gameboardContainer = document.createElement('div');
     gameboardContainer.classList.add('gameboard-container', 'gb-fade-in')
@@ -192,6 +210,11 @@ function loadGameBoard() {
     }
 }
 
+function deployFleet() {
+    
+}
+
+
 
 // const playerBattleship = Ship('Battleship', 4);
 // const playerCruiser = Ship('Cruiser', 3);
@@ -199,7 +222,7 @@ function loadGameBoard() {
 // const playerDestroyer = Ship('Destroyer', 2);
 
 
-export { loadMain, loadGameBoard , playerCoordinates, computerCoordinates}
+export { loadMain, loadGameBoard , playerCoordinates, computerCoordinates, isXAxis}
 
 
 
